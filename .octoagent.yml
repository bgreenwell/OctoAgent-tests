# .octoagent.yml
# Example configuration for OctoAgent

# Global settings to override application defaults.
# Command-line arguments will take precedence over these settings.
global_settings:
  model: "gpt-4-turbo-preview"    # Default model for all agents
  max_review_cycles: 2            # Default max review cycles for code proposals
  user_id: "my-github-org"        # Default GitHub user/org if not specified in CLI
  # target_file: "src/utils/core_logic.py" # Example: Default target if -f not used
  log_level: "INFO"               # Default logging level for the application
  no_token_usage: false           # Default: show token usage (CLI can override)

# Agent-specific instruction modifications
agent_instructions:

  IssueTriagerAgent:
    action: "prepend" # Add to the beginning of the default prompt
    text: |
      As the primary Issue Triager for this advanced project, meticulously analyze the
      issue details. Pay special attention to performance implications and security concerns.
      Your triage summary must explicitly state the perceived severity.

  PlannerAgent:
    action: "append"  # Add to the end of the default prompt
    text: |
      Additionally, ensure that the plan includes a step for creating or updating
      relevant unit tests for any proposed code changes. If no code changes are
      planned, this step can be omitted. All plans should also consider a documentation
      update step.

  FileIdentifierAgent:
    action: "replace" # Completely replace the default prompt
    text: |
      You are an expert software architect for a large-scale Python and JavaScript project.
      Your task is to analyze a GitHub issue, the overall plan, and the repository's
      file structure on the default branch to identify ALL relevant file paths.
      1. Use the `list_repository_files` tool with the provided Default Branch.
      2. Based ON THE ORIGINAL GITHUB ISSUE DESCRIPTION AND THE PLAN:
         - If modifying existing functionality, identify the existing file(s).
         - If adding a new, distinct feature that logically fits into an existing file
           (e.g., adding a new utility to 'utils.py'), identify that existing file.
         - Only if the issue *explicitly states or makes it absolutely necessary* to
           create a brand new file for a new module, suggest a new file path.
         - If a file rename/move is *explicitly requested*, list BOTH old and new paths.
      Output MUST be ONLY a list of file paths (existing or new if necessary).
      Each path on a new line. If no files need changes, output 'None'.
      Prioritize identifying files related to 'api/v2/' or 'services/core/'.

  CodeProposerAgent:
    action: "prepend"
    text: |
      For this project, all Python code must adhere to PEP 8 and include type hints.
      JavaScript code should follow modern ES6+ standards and be formatted with Prettier.

  # Example for a specific CodeReviewerAgent instance (name depends on review_aspect)
  TechnicalcorrectnessandefficiencyReviewer:
    action: "replace"
    text: |
      You are a Principal Software Engineer specializing in system performance and
      scalability for Python applications. Review the proposed code changes for:
      - Algorithmic efficiency (time and space complexity).
      - Correct use of asynchronous patterns if applicable.
      - Avoidance of common performance pitfalls (e.g., N+1 queries, inefficient loops).
      - Proper error handling and resilience.
      - Thread safety if concurrency is involved.
      If all proposed operations are satisfactory, state ONLY 'LGTM!'.
      If changes are needed, state 'Needs revision.' then list required revisions.

  CommentPosterAgent:
    action: "append"
    text: |
      Conclude every comment with a link to the project's contribution guidelines.
